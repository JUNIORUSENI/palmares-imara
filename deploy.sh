#!/bin/bash

#===============================================================================
# üöÄ SCRIPT DE D√âPLOIEMENT - APPLICATION PALMAR√àS IMARA
#===============================================================================
#
# üìã DESCRIPTION:
#     Script automatis√© pour d√©ployer l'application Palmar√®s Imara
#     sur un serveur Ubuntu avec Docker et Docker Compose
#
# üéØ FONCTIONNALIT√âS:
#     ‚úÖ V√©rification des pr√©requis (Docker, Docker Compose)
#     ‚úÖ Configuration du firewall (UFW)
#     ‚úÖ Installation et configuration de Nginx
#     ‚úÖ D√©ploiement des conteneurs Docker
#     ‚úÖ Configuration SSL avec Let's Encrypt (optionnel)
#     ‚úÖ Tests de fonctionnement post-d√©ploiement
#
# üìç DOMAINE: https://palmares.aedbimarasfs.org/
#
# üõ†Ô∏è  UTILISATION:
#     chmod +x deploy.sh
#     ./deploy.sh
#
# ‚ö†Ô∏è  PR√âREQUIS:
#     - Ubuntu 20.04+ ou Debian 11+
#     - Acc√®s root ou sudo
#     - Domaine configur√© (DNS pointant vers le serveur)
#
#===============================================================================

set -e

echo "üöÄ D√©but du d√©ploiement de l'application Palmar√®s Scolaire"

# Variables (√† adapter selon votre configuration)
PROJECT_NAME="palmares"
DOMAIN="palmares.aedbimarasfs.org"
EMAIL="admin@aedbimarasfs.org"

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Fonction d'affichage des messages
log_info() {
    echo -e "${GREEN}[INFO]${NC} $(date '+%Y-%m-%d %H:%M:%S') - $1"
}

log_warn() {
    echo -e "${YELLOW}[WARN]${NC} $(date '+%Y-%m-%d %H:%M:%S') - $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $(date '+%Y-%m-%d %H:%M:%S') - $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $(date '+%Y-%m-%d %H:%M:%S') - $1"
}

# Fonction d'aide
show_help() {
    echo "================================================================================"
    echo "üöÄ SCRIPT DE D√âPLOIEMENT - APPLICATION PALMAR√àS IMARA"
    echo "================================================================================"
    echo ""
    echo "üìã DESCRIPTION:"
    echo "    Script automatis√© pour d√©ployer l'application Palmar√®s Imara"
    echo "    sur un serveur Ubuntu avec Docker et Docker Compose"
    echo ""
    echo "üéØ UTILISATION:"
    echo "    ./deploy.sh              # D√©ploiement complet"
    echo "    ./deploy.sh --help       # Afficher cette aide"
    echo "    ./deploy.sh --version    # Afficher la version"
    echo ""
    echo "üìç CONFIGURATION ACTUELLE:"
    echo "    Domaine: $DOMAIN"
    echo "    Email: $EMAIL"
    echo "    Projet: $PROJECT_NAME"
    echo ""
    echo "‚ö†Ô∏è  PR√âREQUIS SYST√àME:"
    echo "    ‚Ä¢ Ubuntu 20.04+ ou Debian 11+"
    echo "    ‚Ä¢ Acc√®s root ou sudo"
    echo "    ‚Ä¢ Domaine configur√© (DNS pointant vers le serveur)"
    echo "    ‚Ä¢ Ports 80 et 443 ouverts"
    echo ""
    echo "üõ†Ô∏è  √âTAPES DU D√âPLOIEMENT:"
    echo "    1. ‚úÖ V√©rification des pr√©requis"
    echo "    2. üåê V√©rification du domaine"
    echo "    3. üîí Configuration du firewall"
    echo "    4. üåê Installation de Nginx"
    echo "    5. üê≥ D√©ploiement Docker"
    echo "    6. ‚öôÔ∏è  Configuration Nginx"
    echo "    7. üîí Configuration SSL (optionnel)"
    echo "    8. ‚úÖ Tests post-d√©ploiement"
    echo ""
    echo "üìÅ FICHIERS CR√â√âS:"
    echo "    ‚Ä¢ .env.prod (variables d'environnement)"
    echo "    ‚Ä¢ /etc/nginx/sites-available/$PROJECT_NAME"
    echo "    ‚Ä¢ Conteneurs Docker (PostgreSQL, Django, Nginx)"
    echo ""
    echo "üåê URLS APR√àS D√âPLOIEMENT:"
    echo "    ‚Ä¢ Application: http://$DOMAIN"
    echo "    ‚Ä¢ Admin: http://$DOMAIN/admin/"
    echo "    ‚Ä¢ Status: http://$DOMAIN/health/"
    echo ""
    echo "================================================================================"
}

# V√©rification des pr√©requis
check_prerequisites() {
    log_info "V√©rification des pr√©requis..."

    # V√©rification de Docker
    if ! command -v docker &> /dev/null; then
        log_error "Docker n'est pas install√©. Veuillez l'installer d'abord."
        log_info "Commande d'installation: sudo apt install docker.io"
        exit 1
    fi

    # V√©rification de Docker Compose
    if ! command -v docker-compose &> /dev/null; then
        log_error "Docker Compose n'est pas install√©. Veuillez l'installer d'abord."
        log_info "Commande d'installation: sudo apt install docker-compose"
        exit 1
    fi

    # V√©rification des permissions Docker
    if ! docker info &> /dev/null; then
        log_error "Docker n'est pas accessible. Ajoutez votre utilisateur au groupe docker:"
        log_info "Commande: sudo usermod -aG docker $USER"
        log_info "Puis red√©marrez votre session ou ex√©cutez: newgrp docker"
        exit 1
    fi

    log_success "Pr√©requis v√©rifi√©s avec succ√®s"
}

# V√©rification de la configuration du domaine
check_domain() {
    log_info "V√©rification de la configuration du domaine $DOMAIN..."

    # Test de r√©solution DNS
    if ! nslookup $DOMAIN &> /dev/null; then
        log_warn "Le domaine $DOMAIN ne r√©sout pas. V√©rifiez la configuration DNS."
    else
        log_success "Le domaine $DOMAIN r√©sout correctement"
    fi

    # Test de connectivit√©
    if curl -s --head --max-time 10 https://$DOMAIN | head -n 1 | grep -q "200\|301\|302"; then
        log_warn "Le domaine $DOMAIN semble d√©j√† configur√©. V√©rifiez les conflits potentiels."
    else
        log_info "Le domaine $DOMAIN est disponible pour la configuration"
    fi
}

# Configuration du firewall
setup_firewall() {
    log_info "Configuration du firewall..."

    # UFW (Ubuntu/Debian)
    if command -v ufw &> /dev/null; then
        sudo ufw allow ssh
        sudo ufw allow 'Nginx Full'
        sudo ufw --force enable
        log_info "Firewall UFW configur√©"
    fi

    # Firewalld (CentOS/RHEL)
    if command -v firewall-cmd &> /dev/null; then
        sudo firewall-cmd --permanent --add-service=ssh
        sudo firewall-cmd --permanent --add-service=http
        sudo firewall-cmd --permanent --add-service=https
        sudo firewall-cmd --reload
        log_info "Firewall Firewalld configur√©"
    fi
}

# Installation de Nginx (si pas d√©j√† install√©)
install_nginx() {
    if ! command -v nginx &> /dev/null; then
        log_info "Installation de Nginx..."
        if command -v apt &> /dev/null; then
            sudo apt update
            sudo apt install -y nginx
        elif command -v yum &> /dev/null; then
            sudo yum install -y nginx
        fi
        sudo systemctl enable nginx
        log_info "Nginx install√©"
    else
        log_info "Nginx d√©j√† install√©"
    fi
}

# Configuration SSL avec Let's Encrypt (optionnel)
setup_ssl() {
    if command -v certbot &> /dev/null; then
        log_info "Configuration SSL avec Let's Encrypt..."
        sudo certbot --nginx -d $DOMAIN --email $EMAIL --agree-tos --non-interactive
        log_info "SSL configur√©"
    else
        log_warn "Certbot n'est pas install√©. SSL non configur√©."
        log_warn "Pour configurer SSL plus tard: sudo apt install certbot python3-certbot-nginx"
    fi
}

# D√©ploiement de l'application
deploy_application() {
    log_info "D√©ploiement de l'application..."

    # Cr√©ation des r√©pertoires n√©cessaires
    sudo mkdir -p /var/www/$PROJECT_NAME
    sudo chown $USER:$USER /var/www/$PROJECT_NAME

    # Copie des fichiers (√† adapter selon votre m√©thode de d√©ploiement)
    # Ici, on suppose que les fichiers sont d√©j√† sur le serveur
    # Vous pouvez utiliser Git, SCP, ou autre m√©thode

    cd /var/www/$PROJECT_NAME

    # Cr√©ation du fichier .env.prod
    if [ ! -f .env.prod ]; then
        log_info "Cr√©ation du fichier .env.prod..."
        cat > .env.prod << EOF
DEBUG=0
SECRET_KEY=$(openssl rand -hex 32)
ALLOWED_HOSTS=$DOMAIN,localhost,127.0.0.1
DB_NAME=palmares_db
DB_USER=palmares_user
DB_PASSWORD=$(openssl rand -hex 16)
DB_HOST=db
DB_PORT=5432
EOF
        log_warn "Fichier .env.prod cr√©√©. Veuillez v√©rifier et ajuster les valeurs sensibles."
    fi

    # Construction et d√©marrage des conteneurs
    log_info "Construction des conteneurs Docker..."
    docker-compose -f docker-compose.prod.yml build

    log_info "D√©marrage des services..."
    docker-compose -f docker-compose.prod.yml up -d

    # Collecte des fichiers statiques
    log_info "Collecte des fichiers statiques..."
    docker-compose -f docker-compose.prod.yml exec web python manage.py collectstatic --noinput

    # Application des migrations
    log_info "Application des migrations de base de donn√©es..."
    docker-compose -f docker-compose.prod.yml exec web python manage.py migrate

    # Cr√©ation du superutilisateur (optionnel)
    log_info "Cr√©ation du superutilisateur Django..."
    docker-compose -f docker-compose.prod.yml exec web python manage.py createsuperuser --noinput --username admin --email $EMAIL 2>/dev/null || log_warn "Superutilisateur non cr√©√© automatiquement. √Ä faire manuellement."

    # V√©rification de l'√©tat des services
    log_info "V√©rification de l'√©tat des services..."
    sleep 10

    # V√©rifier que les conteneurs sont en cours d'ex√©cution
    if docker-compose -f docker-compose.prod.yml ps | grep -q "Up"; then
        log_success "Les conteneurs Docker sont op√©rationnels"
    else
        log_error "Probl√®me avec les conteneurs Docker"
        docker-compose -f docker-compose.prod.yml logs
        exit 1
    fi

    # Test de l'application
    if curl -s --head --max-time 30 http://localhost:8000 | head -n 1 | grep -q "200\|301\|302"; then
        log_success "L'application Django r√©pond correctement"
    else
        log_error "L'application Django ne r√©pond pas"
        docker-compose -f docker-compose.prod.yml logs web
        exit 1
    fi

    log_success "Application d√©ploy√©e avec succ√®s"
}

# Configuration de Nginx
configure_nginx() {
    log_info "Configuration de Nginx..."

    # Sauvegarde de la configuration par d√©faut
    sudo cp /etc/nginx/sites-available/default /etc/nginx/sites-available/default.backup

    # Cr√©ation de la configuration pour l'application
    sudo tee /etc/nginx/sites-available/$PROJECT_NAME > /dev/null <<EOF
server {
    listen 80;
    server_name $DOMAIN;

    location / {
        proxy_pass http://127.0.0.1:8000;
        proxy_set_header Host \$host;
        proxy_set_header X-Real-IP \$remote_addr;
        proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto \$scheme;
    }

    location /static/ {
        alias /var/www/$PROJECT_NAME/staticfiles/;
        expires 1y;
        add_header Cache-Control "public, immutable";
    }

    location /media/ {
        alias /var/www/$PROJECT_NAME/media/;
        expires 1M;
        add_header Cache-Control "public";
    }
}
EOF

    # Activation du site
    sudo ln -sf /etc/nginx/sites-available/$PROJECT_NAME /etc/nginx/sites-enabled/
    sudo rm -f /etc/nginx/sites-enabled/default

    # Test de la configuration
    sudo nginx -t

    # Red√©marrage de Nginx
    sudo systemctl restart nginx

    log_info "Nginx configur√©"
}

# Fonction principale
main() {
    # Gestion des arguments
    case "${1:-}" in
        --help|-h)
            show_help
            exit 0
            ;;
        --version|-v)
            echo "Palmar√®s Imara - Script de d√©ploiement v1.0"
            echo "Domaine: $DOMAIN"
            exit 0
            ;;
        "")
            # Pas d'argument, proc√©der au d√©ploiement
            ;;
        *)
            log_error "Argument inconnu: $1"
            log_info "Utilisez --help pour voir l'aide"
            exit 1
            ;;
    esac

    log_info "üöÄ D√âBUT DU D√âPLOIEMENT - Application Palmar√®s Imara"
    log_info "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    log_info "üìç Domaine: $DOMAIN"
    log_info "üìß Email: $EMAIL"
    log_info "üèóÔ∏è  Projet: $PROJECT_NAME"
    log_info "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

    # V√©rifications pr√©-d√©ploiement
    check_prerequisites
    check_domain

    # Configuration syst√®me
    setup_firewall
    install_nginx

    # D√©ploiement de l'application
    deploy_application

    # Configuration web
    configure_nginx
    setup_ssl

    # Finalisation
    log_info "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
    log_success "üéâ D√âPLOIEMENT TERMIN√â AVEC SUCC√àS !"
    log_info "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"

    log_info "üåê URLs d'acc√®s :"
    log_info "   üì± Application: http://$DOMAIN"
    log_info "   üîß Admin: http://$DOMAIN/admin/"
    log_info "   üìä Status: http://$DOMAIN/health/"

    log_info ""
    log_warn "üìã ACTIONS RECOMMAND√âES :"
    log_warn "   1. üîê Changer le mot de passe admin (admin/admin123)"
    log_warn "   2. üîí Configurer HTTPS avec Let's Encrypt"
    log_warn "   3. üíæ Configurer les sauvegardes PostgreSQL"
    log_warn "   4. üìä Monitorer les logs et performances"
    log_warn "   5. üîß Tester l'import Excel et l'export PDF"

    log_info ""
    log_info "üìÅ Fichiers de configuration cr√©√©s :"
    log_info "   ‚öôÔ∏è  .env.prod (variables d'environnement)"
    log_info "   üê≥ docker-compose.prod.yml (services)"
    log_info "   üåê /etc/nginx/sites-available/$PROJECT_NAME (Nginx)"

    log_info ""
    log_success "‚ú® L'application Palmar√®s Imara est maintenant op√©rationnelle !"
}

# Ex√©cution
main "$@"